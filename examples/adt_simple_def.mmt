// examples/adt_simple_def.mmt

// Define a simple ADT for optional numbers
data MaybeNum [
  None : MaybeNum,
  Some : number -> MaybeNum
];

// Create an instance of Some
val present_num : MaybeNum := Some 10;

// Create an instance of None
val absent_num : MaybeNum := None;

// Function that uses pattern matching to extract value or return default
val get_num_or_default : (MaybeNum -> number) := 
  branch MaybeNum [
    (Some n) -> n,
    (None)   -> 0 // Default value if None
  ];

// Test with Some
val test_some : number := get_num_or_default (Some 42); // Expected: 42

// Test with None
val test_none : number := get_num_or_default (None);    // Expected: 0

// Simple main to ensure it can be processed (though execution isn't the primary test here)
val main : number := test_some;
