// examples/adt_simple_def.mmt

// Define a simple ADT for optional numbers
data NumBool [
  SomeNum : number -> NumBool,
  SomeBool : bool -> NumBool
];

// Create an instance of Some
val present_num : NumBool := 10 |> SomeNum;

// Create an instance of None
val absent_num : NumBool := true |> SomeBool;

// Function that uses pattern matching to extract value or return default
val get_num_or_default : NumBool -> number := 
  branch NumBool [
    let SomeNum n -> n,
    let SomeBool b -> if b then 1 else 0 // Default value if None
  ];

// Test with Some
val test_some : number := 42 |> SomeNum |> get_num_or_default; // Expected: 42

// Test with None
val test_none : number := true |> SomeBool |> get_num_or_default;    // Expected: 0

// Simple main to ensure it can be processed (though execution isn't the primary test here)
val main : number -> number := let tmp -> test_some;
