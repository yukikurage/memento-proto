// Edge cases for function composition

// Edge Case 1: Simple working composition (manual)
val inc : (x : number) => number := (x : number) => x + 1;
val double : (x : number) => number := (x : number) => x * 2;
val manual_compose : (x : number) => number := (x : number) => double(inc(x));
val test1 : number := manual_compose(5);

// Edge Case 2: Higher-order functions
val apply_twice : (f : (x : number) => number, x : number) => number := 
  (f : (x : number) => number, x : number) => f(f(x));
val test2 : number := apply_twice(inc, 10);

// Edge Case 3: Function returning function
val make_adder : (n : number) => (x : number) => number := 
  (n : number) => (x : number) => x + n;
val add5 : (x : number) => number := make_adder(5);
val test3 : number := add5(10);

// Edge Case 4: Chained applications
val chain : number := inc(double(add5(3)));