data Either [
  Left : number -> Either,
  Right: number -> Either
];

effect Trans [
  NumBool : number -> bool with <Trans>,
  BoolNum : bool -> number with <Trans>
];

effect ThrowE [
  ThrowE : number -> number with <ThrowE> // Represents an operation that might throw
];

// c_func: Takes a number, applies NumBool, then BoolNum if true, else returns 100.
// Effects: <Trans>
val c_func : (number -> number with <Trans, ThrowE>) := input_n -> (
  input_n |> (do NumBool) |> x_nb : bool
  -> if (x_nb) then (
    true |> (do BoolNum)
  ) else (
    100 |> (do ThrowE)
  )
);


val handle_trans : (number with <Trans> => number) := (
  handle : (number with <Trans> => number) [
    (n |> NumBool |> k) -> ( (n > 0) |> k ),
    (b |> BoolNum |> k) -> ( (if (b) then (1) else (0)) |> k ),
    (x) -> x
  ]
);

val handle_throw_e : (number with <ThrowE> => Either) := (
  handle : (number with <ThrowE> => Either) [
    (n |> ThrowE |> k) -> (n |> Left),
    (x) -> x |> Right
  ]
);

val test : number := 10;

// main: Demonstrates handling Trans and ThrowE.
val main : number -> Either := (
  tmp 
  -> test |> input_n
  -> input_n |> c_func |>> handle_trans |>> handle_throw_e  // == Right 1
);