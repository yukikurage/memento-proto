// Corrected polymorphic functions and data types
val identity<T> : (x : T) => T := (x : T) => x;
val const_value<T> : (x : T) => number := (x : T) => 42;

// Polymorphic Option type with correct syntax
data Some<T> : (value : T) => Option;
data None<T> : () => Option;

// Polymorphic Pair type  
data Pair<A, B> : (first : A, second : B) => Pair;

// Using polymorphic functions (type inference works)
val test_number : number := identity(42);
val test_string : string := identity("hello");
val test_const : number := const_value(true);

// Using polymorphic data types
val some_num : Option := Some(100);
val none_val : Option := None();
val my_pair : Pair := Pair(42, true);

// Main function for testing
val main : () => number := () => test_number;