// Test new data definition syntax with correct usage
// According to CLAUDE.md: Data return types cannot have type parameters

// Simple monomorphic data type
data NumType [MkNumber : (x : number) => NumType];

// Polymorphic data types with multiple constructors
data Option [Some<T> : (value : T) => Option<T>, None<T> : () => Option<T>];

// Polymorphic pair type
data PairType [Pair<A> : (first : A, second : A) => PairType<A>];

// List type with two constructors
data List [Cons<T> : (head : T, tail : List<T>) => List<T>, Nil<T> : () => List<T>];

// Example usage showing multi-constructor pattern matching
val safe_head<T> : (list : List<T>) => Option<T> = (list : List<T>) =>
  switch (list) [
    (Cons(head, tail) : List<T>) => Some(head),
    (Nil() : List<T>) => None()
  ];

// Create some test data
val my_list : List<number> = Cons(1, Cons(2, Cons(3, Nil())));
val empty_list : List<number> = Nil();

// Test the functions
val first : Option<number> = safe_head(my_list);
val none : Option<number> = safe_head(empty_list);
